@model HomeIndexModel
@{
    ViewData["Title"] = "Home Page";
}
<div id="topDisclaimer" class="row">
    <div class="col-md-12">
        <div class="alert alert-warning">
            <span class="glyphicon glyphicon-warning-sign" aria-hidden="true"></span>
            <strong>Remember:</strong> finding an AED should <strong>never</strong> take precedence over immediate, high-quality CPR!
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div id="map" class="img-rounded"></div>
    </div>
</div>
<div id="closeToYou" class="row" data-bind="with: currentLocation">
    <div class="col-md-12">
        <h2>AEDs close to you</h2>
        <ul data-bind="foreach: $parent.closestAEDs">
            <li><span data-bind="text: LocationName"></span> - <span data-bind="text: humanReadableDistance(metersBetween2Cordinates(model.currentLocation().latitude, model.currentLocation().longitude, Latitude, Longitude))"></span> away</li>
        </ul>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <h2>AEDs in the Map</h2>
        <ul data-bind="foreach: aedLocations">
            <li data-bind="text: LocationName"></li>
        </ul>
    </div>
</div>

@section scripts
{
    <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js'></script>

    <script>
        var map;
        var model = new function viewModel() {
            var that = this;
            this.aedLocations = ko.observableArray(@Json.Serialize(Model.AEDs, new Newtonsoft.Json.JsonSerializerSettings { Formatting = Newtonsoft.Json.Formatting.None, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore })),
            this.currentLocation = ko.observable(null);
            this.closestAEDs = ko.computed(function () {
                if (that.currentLocation() != null) {
                    return that.aedLocations().sort(function (left, right) {
                        var distanceToLeft = distance(that.currentLocation().latitude, that.currentLocation().longitude, left.Latitude, left.Longitude);
                        var distanceToRight = distance(that.currentLocation().latitude, that.currentLocation().longitude, right.Latitude, right.Longitude);

                        if (distanceToLeft < distanceToRight)
                            return -1;
                        else if (distanceToLeft > distanceToRight)
                            return 1;
                        else
                            return 0;
                    }).slice(0, 3);
                } else {
                    return [];
                }
            });
            this.googleMapsReady = ko.observable(false);
        };

        function getGeoLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var latitude = position.coords.latitude;
                    var longitude = position.coords.longitude;
                    model.currentLocation({ latitude: latitude, longitude: longitude });

                    new google.maps.Marker({
                        position: { lat: latitude, lng: longitude },
                        title: 'Your Location',
                        map: map,
                        icon: {
                            path: google.maps.SymbolPath.CIRCLE,
                            scale: 5
                        }
                    });

                    var bounds = new google.maps.LatLngBounds();
                    bounds.extend(new google.maps.LatLng({ lat: model.currentLocation().latitude, lng: model.currentLocation().longitude }));
                    for (var i = 0; i < model.closestAEDs().length; i++) {
                        bounds.extend(new google.maps.LatLng({ lat: model.closestAEDs()[i].Latitude, lng: model.closestAEDs()[i].Longitude }));
                    }
                    map.fitBounds(bounds);

                }, function error(msg) {
                }, { maximumAge: 1000, timeout: Infinity, enableHighAccuracy: true });

            } else {
            }
        }

        function initMap() {
            getGeoLocation();
            ko.applyBindings(model);

            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 35.922337, lng: 14.388411 },
                zoom: 11,
                streetViewControl: false,
                fullscreenControl: true
            });

            for (var i in model.aedLocations()) {
                new google.maps.Marker({
                    position: { lat: model.aedLocations()[i].Latitude, lng: model.aedLocations()[i].Longitude },
                    title: model.aedLocations()[i].LocationName,
                    map: map
                });
            }

            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < model.aedLocations().length; i++) {
                bounds.extend(new google.maps.LatLng({ lat: model.aedLocations()[i].Latitude, lng: model.aedLocations()[i].Longitude }));
            }
            map.fitBounds(bounds);

            model.googleMapsReady(true);
        }

        $(document).ready(function () {
        });
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIICHmQFj_9YYByQ9kPEpK9vlQLLgUj7w&libraries=geometry&callback=initMap" async defer></script>
}
